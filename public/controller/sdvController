
export function sdvController ($scope, $route, $interval, $http, es, $filter, NgTableParams) {
    $scope.allData          = [];    //variable to get all the data saved in the index chosen by the user
    $scope.columns          = [];    //variable to store the name of the columns present in the index chosen by the user
    $scope.total            = 0;     //variable to store the number of hits for the index
    $scope.listIndices      = [];    //variable to store all the the names of the indexes stored in the ES instance
    $scope.choiceIn         = false; //variable set to true if the user has already chosen an index
    $scope.choiceCol        = 0;     //variable that store the number of columns chosen by the user
    $scope.colsDisp         = [];    //variable to store the names of the columns that have been chosen by the user
    $scope.colsDispMet      = [];    //variable to store the names of the columns on wich we can add metrics
    var colPicked           = '';    //string variable that will store the names of the columns chosen by the user to avoid redundancy 
    $scope.boutonActif      = [];    //table variable that will store as an index the names of the columns chosen by the user and the content will be the index in the html side
    $scope.requestSize      = 20;    //variable to set in the search request the number of hits we want to get in return initialized by default to 20 
    $scope.tabCustomPaginate= [];    //table variable that will store the data from the index depends on what columns the user had chosen
    $scope.tableCsv         = [];    //table variable that will be needed for the CSV export
    const swal              = require('sweetalert2');
    const toast             = swal.mixin({
      toast: true,
      position: 'top-end',
      showConfirmButton: false,
      timer: 3000
    });

    //Function that return the state of the cluster
    es.cluster.health(function (err, resp) {
      if (err) {
        $scope.data = err.message;
      } else {
        $scope.data = resp;
      }
    });

    //Function to load all the indexes stored in the ES instance
    $scope.loadIndexes    = function () {
      es.cat.indices({
        bytes: "k",
        v: true,
        format: "json"
      }, function (r, q) {
        $scope.listIndices = angular.fromJson(q);
      })
    };  

    //Function to pick columns
    $scope.colPicker            = function (col, index) {
      $scope.boutonActif[col]   = index;
      $scope.export             = false;
      if(colPicked.indexOf(col) ==-1) {
        $scope.choiceCol        += 1;
        colPicked               = colPicked + ' ' + col;
        $scope.colsDisp.push(col);
        if(angular.isNumber($scope.tabCustomPaginate[1][col])){
          $scope.colsDispMet.push(col);
        }
      }else{
        swal({
            type: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',
            footer: 'You can'+"'"+'t pick the same column two times',
            })
      }
    };

    //Function to delete columns from the table
    $scope.colUnpick    = function (colp, index) {
      $scope.colsDisp.splice(index, 1);
      var indexMet = $scope.colsDispMet.indexOf(colp);
      if (indexMet > -1) {
        $scope.colsDispMet.splice(indexMet, 1);
      }
      $scope.export     = false;
      delete $scope.boutonActif[colp];
      colPicked         = colPicked.replace(colp, "");
      $scope.choiceCol  -= 1;
      for (var i = 0; i < $scope.tabCustomPaginate.length; i++) {
              delete $scope.tabCustomPaginate[i]["percentile_"+colp];
            }
      $scope.tableParams      = new NgTableParams({
                  page: 1, // show first page
                  count: 10 // count per page
              }, {
                  filterDelay: 0,
                  dataset: $scope.tabCustomPaginate
              });
    } 

    //Function to change the size of the search request sent to ES
    $scope.sizeChanger       = function (requestSize) {
      $scope.requestSize     = requestSize;
      $scope.export          = false;
      es.search({
        index: $scope.indexCourant,
        size: requestSize,
        body: {
            "query":
              {
                match_all : {}
              },
            }     
        }).then(function (response) {
        $scope.total            = response.hits.total;
        $scope.allData          = [];
        $scope.allData          = angular.fromJson(response.hits.hits); 
        $scope.choiceIn         = true;
        $scope.tabCustomPaginate= [];
        for (var i = 0; i < $scope.allData.length; i++) {
          $scope.tabCustomPaginate[i]=$scope.allData[i]._source;
        }
        $scope.tableParams      = new NgTableParams({
              page: 1, // show first page
              count: 10 // count per page
          }, {
              filterDelay: 0,
              dataset: $scope.tabCustomPaginate
          });
      });
      
    }

    //Function to load the data for the columns chosen by the user
    $scope.loadData       = function(indexx,index){
      $scope.boutonActif  = [];
      $scope.indexActif   = index;
      $scope.indexCourant = indexx;
      $scope.choiceCol    = 0;
      if($scope.choiceIn  = true){
        $scope.initAll(); 
      }
      es.search({
        index: indexx,
        size: 20,
        body: {
            "query":
              {
                match_all : {}
              },
            }     
      }).then(function (response) {
        $scope.total    = response.hits.total;
        $scope.allData  = angular.fromJson(response.hits.hits);
        for (var i = 0; i < $scope.allData.length; i++) {
          $scope.tabCustomPaginate[i]=$scope.allData[i]._source;
        }
        var c               = 0;
        var columnsInn      = response.hits.hits[0]._source;
        for(var keyy in columnsInn){
          $scope.columns[c] = keyy;
          c++;
        } 
        $scope.choiceIn     = true;
        $scope.tableParams  = new NgTableParams({
          page: 1, // show first page
          count: 10 // count per page
        }, {
            filterDelay: 0,
            dataset: $scope.tabCustomPaginate
        });
      });
    };
    
    //Function to init almost all variables that needs to 
    $scope.initAll              = function(){
      $scope.allData            = [];
      $scope.columns            = [];
      colPicked                 = '';
      $scope.colsDisp           = [];
      $scope.tabCustomPaginate  = [];
      $scope.export             = false;
    }

    //Function to prepare the data that will be exported as CSV
    $scope.exportCSV    = function(){
      var c             =  0;
      $scope.tableCsv   = [];
      $scope.colExport  = []; 
      $scope.export     = true;
      var source        = '';
      source            = $scope.colsDisp[0];
      if($scope.colsDisp.length>1){
        for (var i = 1; i < $scope.colsDisp.length; i++) {
          source        = source+','+$scope.colsDisp[i]; 
        }
      }
      es.search({
        index: $scope.indexCourant,
        size: $scope.requestSize,
        _source_include :source,
        body: {
            "query":
              {
                match_all : {}
              },
            }     
        }).then(function (response) {
        $scope.allData  = angular.fromJson(response.hits.hits);
        for (var i = 0; i < $scope.allData.length; i++) {
          $scope.tableCsv[i]=$scope.allData[i]._source;
        }
        var columnsExp          = response.hits.hits[0]._source;
        for(var keys in columnsExp){
          $scope.colExport[c]   = keys;
          c++;
        }
        toast({
          type: 'success',
          title: 'Your CSV is ready'
        })
      });
    }


    //function to calculate percentile
    $scope.percentile       = function(field){
      $scope.Pourcentage    = [];
      $scope.sum            = 0;
      $scope.stats(field,"sum",function(){
        es.search({
            index: $scope.indexCourant,
            size: $scope.requestSize,
            body: {
                "query":
                  {
                    match_all : {}
                  },
                  "script_fields":{
                    "Pourcentage":  {
                      "script":       {
                        "lang":   "expression",
                        "source": "doc['"+field+"'] /"+$scope.stat+"* 100"
                                      }
                                    }
                                  }
                }     
            }).then(function (response) {
            $scope.PourcentageCap = angular.fromJson(response.hits.hits);
             for (var i = 0; i < $scope.PourcentageCap.length; i++) {
              $scope.tabCustomPaginate[i]["percentile_"+field]=parseFloat(($scope.PourcentageCap[i].fields.Pourcentage)).toFixed(3);
            }
          });
          $scope.tableParams      = new NgTableParams({
                  page: 1, // show first page
                  count: 10 // count per page
              }, {
                  filterDelay: 0,
                  dataset: $scope.tabCustomPaginate
              });
      });
    }

    //function to choose metric
    $scope.choixMetric = function(metric,field){
      switch (metric) {
        case '0':
          $scope.percentile(field);
          break;
        default:
          console.log('Sorry, we are out of ' + metric + '.');
      }
    }

    //function that returns all the stats generated by ES
    $scope.stats    = function(field, statType, callback){
      $scope.stat   = 0;
      es.search({
        index: $scope.indexCourant,
        size: 0,
        body: {
            "aggs": {
              "stats": {
                "stats": {
                  "field": field,
                  "script" : {
                    "lang": "painless",
                    "source": "_value "
                             }
                          }
                        }
                    }
            }     
        }).then(function (response) {
            $scope.stat = angular.fromJson(response.aggregations.stats[statType]);
            callback();
        });
      
    }
  };
